<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Etzel Server</title>
    <link>http://etzelserver.com/docs/</link>
    <description>Recent content in Docs on Etzel Server</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2016 12:22:13 +0530</lastBuildDate>
    <atom:link href="http://etzelserver.com/docs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Skip List based Delay Queue</title>
      <link>http://etzelserver.com/docs/internal/skip-list-delay-queue/</link>
      <pubDate>Fri, 01 Jan 2016 12:22:13 +0530</pubDate>
      
      <guid>http://etzelserver.com/docs/internal/skip-list-delay-queue/</guid>
      <description>&lt;p&gt;[date:64bit:Int]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delay Queue will have a separate meta file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delay Queue will be fragmented date wise&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for ex:
        2016-10-25.Qname.dly
        2016-10-26.Qname.dly
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There will be a Reader process that will pop elements from the Delay Queue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the last element is NULL and the Current date is greater than the one stored in the Metafile&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the date in the Meta file,&lt;/li&gt;
&lt;li&gt;create the new date fragment if not exists,&lt;/li&gt;
&lt;li&gt;Move the Reader Process to the new fragment/file,&lt;/li&gt;
&lt;li&gt;Delete the old fragment.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C# / .NET Driver</title>
      <link>http://etzelserver.com/docs/drivers/dotnet/</link>
      <pubDate>Thu, 27 Aug 2015 13:11:05 +0530</pubDate>
      
      <guid>http://etzelserver.com/docs/drivers/dotnet/</guid>
      <description>

&lt;p&gt;using NuGet Console in Visual Studio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package EtzelClient
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;publish-example:9758dc2ecfa9a309cef2dafc8e331f77&#34;&gt;Publish Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Publish
   {
       static void Main(string[] args)
       {
           Etzel.EtzelClient e = null;
           try
           {
               //specify the host
               e = new Etzel.EtzelClient(&amp;quot;ws://192.168.0.91:8080/connect&amp;quot;);
               
               //publish a message to the queue
               e.publish(&amp;quot;myqueue1&amp;quot;, &amp;quot;mymessage&amp;quot;);
               
           }
           catch (Exception ex)
           {
               Console.Write(ex.Message);
           }
           finally
           {
               e = null;
           }
       }
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;subscribe-example:9758dc2ecfa9a309cef2dafc8e331f77&#34;&gt;Subscribe Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Subscribe
   {
       static void Main(string[] args)
       {
           Etzel.EtzelClient e = null;
           try
           {
               //specify the host
               e = new Etzel.EtzelClient(&amp;quot;ws://192.168.0.91:8080/connect&amp;quot;);

               //The callback that needs to be given to the subscribe function
               Etzel.EtzelClient.Tqbacks func = delegate(Etzel.Dtpl data)
               {

                   Console.WriteLine(data.msg);
                   
                   //acknowledge/delete Item permanently after processing
                   e.acknowledge(data.qname,data.uid);
                   
               };

               //subscribes and fetches the message from the queue
               e.subscribe(&amp;quot;myqueue1&amp;quot;, func);

               //don&#39;t let the main program exit,
               //so that the callback is called for new messages
               while (true)
               {
                   System.Threading.Thread.Sleep(100000);
               }

           }
           catch (Exception ex)
           {
               Console.Write(ex.Message);
           }
           finally
           {
               e = null;
           }
       }
   }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;functions:9758dc2ecfa9a309cef2dafc8e331f77&#34;&gt;Functions:&lt;/h3&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options:9758dc2ecfa9a309cef2dafc8e331f77&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback:9758dc2ecfa9a309cef2dafc8e331f77&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queueName which is the name of the Queue you want to fetch the data from, callback is a custom fucntion which you have to provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    ec.subscribe(&amp;quot;test&amp;quot;,cb);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;e.acknowledge(queuename,uid)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Driver</title>
      <link>http://etzelserver.com/docs/drivers/php/</link>
      <pubDate>Sun, 23 Aug 2015 11:33:19 +0530</pubDate>
      
      <guid>http://etzelserver.com/docs/drivers/php/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;composer require bat_coder/etzelclient:dev-master

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options:14fa85f82f7cd05b22a291e5527c5ae7&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$etzel = new EtzelClient(&amp;quot;ws://127.0.0.1:8080/connect&amp;quot;);

$emails= [&amp;quot;abc@example.com&amp;quot;,&amp;quot;def@example.com&amp;quot;,&amp;quot;hij@example.com&amp;quot;];

foreach($emails as $email){
    
    $etzel-&amp;gt;publish(&amp;quot;group1&amp;quot;, $email);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test is the queuename,hi is the message and the delay is 0 seconds&lt;/p&gt;

&lt;p&gt;additional options for publish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $etzel-&amp;gt;publish(&#39;test&#39;,&#39;hi&#39;,{delay:5,expires:3600,priority:0});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt;: The item will not be available on the queue until this many seconds have passed.
Default is 0 seconds. Maximum is 365 days(in seconds).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;expires&lt;/code&gt;: How long in seconds to keep the item on the queue before it is deleted.
Default is 0(365 days).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;priority&lt;/code&gt;: It can be either -20,0,20 (High, Medium, Low).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback:14fa85f82f7cd05b22a291e5527c5ae7&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queuename which is the name of the you want to fetch the data from, callback is a custom fucntion which you have you provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    ec-&amp;gt;subscribe(&amp;quot;test&amp;quot;,cb);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;p&gt;acknowledge(queuename,uid)&lt;/p&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Driver</title>
      <link>http://etzelserver.com/docs/drivers/js/</link>
      <pubDate>Sat, 22 Aug 2015 23:39:49 +0530</pubDate>
      
      <guid>http://etzelserver.com/docs/drivers/js/</guid>
      <description>

&lt;p&gt;You can install the node client by opening a command prompt and using the following command&lt;/p&gt;

&lt;p&gt;Note: this library can also be executed inside a browser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install etzelclient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then include the library in your .js file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;etzelclient&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options:615e3f22fa9cd8f45adc27486278fdbb&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;etzelclient=require(&amp;quot;etzelclient&amp;quot;);

ec=new etzelclient(&amp;quot;ws://localhost:8080/connect&amp;quot;);

ec.onopen=function(){

    ec.publish(&#39;test&#39;,&#39;hi&#39;);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test is the queuename,hi is the message and the delay is 0 seconds&lt;/p&gt;

&lt;p&gt;additional options for publish:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    ec.publish(&#39;test&#39;,&#39;hi&#39;,{delay:5,expires:3600,priority:0});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt;: The item will not be available on the queue until this many seconds have passed.
Default is 0 seconds. Maximum is 365 days(in seconds).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;expires&lt;/code&gt;: How long in seconds to keep the item on the queue before it is deleted.
Default is 0(365 days).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;priority&lt;/code&gt;: It can be either -20,0,20 (High, Medium, Low).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback:615e3f22fa9cd8f45adc27486278fdbb&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queuename which is the name of the you want to fetch the data from, callback is a custom fucntion which you have you provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;etzelclient=require(&amp;quot;etzelclient&amp;quot;);

ec=new etzelclient(&amp;quot;ws://localhost:8080/connect&amp;quot;);

//function which the end user writes
function mycallback(data){

    console.log(data.msg+&amp;quot; from the queue&amp;quot;);
    ec.acknowledge(&amp;quot;test&amp;quot;,data.uid);

}
ec.onopen=function(){
    ec.subscribe(&amp;quot;test&amp;quot;,mycallback);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;p&gt;acknowledge(queuename,uid)&lt;/p&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data format</title>
      <link>http://etzelserver.com/docs/internal/data-format/</link>
      <pubDate>Sat, 22 Aug 2015 23:02:31 +0530</pubDate>
      
      <guid>http://etzelserver.com/docs/internal/data-format/</guid>
      <description>

&lt;h3 id=&#34;queue-element-format-in-memory:80929b78b7ce01a4c5852f6c3b86083d&#34;&gt;Queue Element format in Memory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;error_count|expires|UidSize|uid|Item

Size of each block in bits:
&amp;lt;&amp;lt;error_count:8&amp;gt;&amp;gt;,&amp;lt;&amp;lt;Expires:64&amp;gt;&amp;gt;,&amp;lt;&amp;lt;Uid_size:16&amp;gt;&amp;gt;,Uid,Msg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;queue-element-format-on-disk:80929b78b7ce01a4c5852f6c3b86083d&#34;&gt;Queue element format on disk&lt;/h3&gt;

&lt;p&gt;The queue elements are stored in a key value store in the following format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. DATA

let us divide DATA which is made up of a key and value.

2. Key: Value

divide them further

3. Qname-uid:  error_count|Delay|expires|Item

Qname: Variable length text
Uid: 14-18 bytes
error_count: 8 bits 
delay: 64 bits
expires: 64 bits
Item: Variable lenght text

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>