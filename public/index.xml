<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Etzel Server</title>
    <link>http://163.172.174.245/etzel-site/public/</link>
    <description>Recent content on Etzel Server</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jan 2016 12:22:13 +0530</lastBuildDate>
    <atom:link href="http://163.172.174.245/etzel-site/public/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Skip List based Delay Queue</title>
      <link>http://163.172.174.245/etzel-site/public/docs/internal/skip-list-delay-queue/</link>
      <pubDate>Fri, 01 Jan 2016 12:22:13 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/docs/internal/skip-list-delay-queue/</guid>
      <description>&lt;p&gt;[date:64bit:Int]&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Delay Queue will have a separate meta file.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Delay Queue will be fragmented date wise&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    for ex:
        2016-10-25.Qname.dly
        2016-10-26.Qname.dly
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There will be a Reader process that will pop elements from the Delay Queue&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If the last element is NULL and the Current date is greater than the one stored in the Metafile&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the date in the Meta file,&lt;/li&gt;
&lt;li&gt;create the new date fragment if not exists,&lt;/li&gt;
&lt;li&gt;Move the Reader Process to the new fragment/file,&lt;/li&gt;
&lt;li&gt;Delete the old fragment.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C# / .NET Driver</title>
      <link>http://163.172.174.245/etzel-site/public/docs/drivers/dotnet/</link>
      <pubDate>Thu, 27 Aug 2015 13:11:05 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/docs/drivers/dotnet/</guid>
      <description>

&lt;p&gt;using NuGet Console in Visual Studio&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PM&amp;gt; Install-Package EtzelClient
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;publish-example&#34;&gt;Publish Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Publish
   {
       static void Main(string[] args)
       {
           Etzel.EtzelClient e = null;
           try
           {
               //specify the host
               e = new Etzel.EtzelClient(&amp;quot;ws://192.168.0.91:8080/connect&amp;quot;);
               
               //publish a message to the queue
               e.publish(&amp;quot;myqueue1&amp;quot;, &amp;quot;mymessage&amp;quot;);
               
           }
           catch (Exception ex)
           {
               Console.Write(ex.Message);
           }
           finally
           {
               e = null;
           }
       }
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;subscribe-example&#34;&gt;Subscribe Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;class Subscribe
   {
       static void Main(string[] args)
       {
           Etzel.EtzelClient e = null;
           try
           {
               //specify the host
               e = new Etzel.EtzelClient(&amp;quot;ws://192.168.0.91:8080/connect&amp;quot;);

               //The callback that needs to be given to the subscribe function
               Etzel.EtzelClient.Tqbacks func = delegate(Etzel.Dtpl data)
               {

                   Console.WriteLine(data.msg);
                   
                   //acknowledge/delete Item permanently after processing
                   e.acknowledge(data.qname,data.uid);
                   
               };

               //subscribes and fetches the message from the queue
               e.subscribe(&amp;quot;myqueue1&amp;quot;, func);

               //don&#39;t let the main program exit,
               //so that the callback is called for new messages
               while (true)
               {
                   System.Threading.Thread.Sleep(100000);
               }

           }
           catch (Exception ex)
           {
               Console.Write(ex.Message);
           }
           finally
           {
               e = null;
           }
       }
   }

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;functions&#34;&gt;Functions:&lt;/h3&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queueName which is the name of the Queue you want to fetch the data from, callback is a custom fucntion which you have to provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    ec.subscribe(&amp;quot;test&amp;quot;,cb);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;e.acknowledge(queuename,uid)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Driver</title>
      <link>http://163.172.174.245/etzel-site/public/docs/drivers/php/</link>
      <pubDate>Sun, 23 Aug 2015 11:33:19 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/docs/drivers/php/</guid>
      <description>

&lt;pre&gt;&lt;code&gt;composer require bat_coder/etzelclient:dev-master

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$etzel = new EtzelClient(&amp;quot;ws://127.0.0.1:8080/connect&amp;quot;);

$emails= [&amp;quot;abc@example.com&amp;quot;,&amp;quot;def@example.com&amp;quot;,&amp;quot;hij@example.com&amp;quot;];

foreach($emails as $email){
    
    $etzel-&amp;gt;publish(&amp;quot;group1&amp;quot;, $email);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test is the queuename,hi is the message and the delay is 0 seconds&lt;/p&gt;

&lt;p&gt;additional options for publish:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    $etzel-&amp;gt;publish(&#39;test&#39;,&#39;hi&#39;,{delay:5,expires:3600,priority:0});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt;: The item will not be available on the queue until this many seconds have passed.
Default is 0 seconds. Maximum is 365 days(in seconds).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;expires&lt;/code&gt;: How long in seconds to keep the item on the queue before it is deleted.
Default is 0(365 days).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;priority&lt;/code&gt;: It can be either -20,0,20 (High, Medium, Low).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queuename which is the name of the you want to fetch the data from, callback is a custom fucntion which you have you provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
    ec-&amp;gt;subscribe(&amp;quot;test&amp;quot;,cb);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;p&gt;acknowledge(queuename,uid)&lt;/p&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javascript Driver</title>
      <link>http://163.172.174.245/etzel-site/public/docs/drivers/js/</link>
      <pubDate>Sat, 22 Aug 2015 23:39:49 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/docs/drivers/js/</guid>
      <description>

&lt;p&gt;You can install the node client by opening a command prompt and using the following command&lt;/p&gt;

&lt;p&gt;Note: this library can also be executed inside a browser.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install etzelclient
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then include the library in your .js file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require(&#39;etzelclient&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;1-publish-queuename-message-options&#34;&gt;1. publish(queuename,message,options)&lt;/h4&gt;

&lt;p&gt;This pushes a message to etzel server.The arguments required are queuename (which is the name of the queue you want to pubish to), message (which is the message you want to publish to the queue),options includes delay and expire functionality . The options argument  can be used when the message insert needs to be delayed or messaged validity needs to be expired. Options isn&amp;rsquo;t an obligatory argument. The delay and expiry is taken in seconds.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;etzelclient=require(&amp;quot;etzelclient&amp;quot;);

ec=new etzelclient(&amp;quot;ws://localhost:8080/connect&amp;quot;);

ec.onopen=function(){

    ec.publish(&#39;test&#39;,&#39;hi&#39;);

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;test is the queuename,hi is the message and the delay is 0 seconds&lt;/p&gt;

&lt;p&gt;additional options for publish:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    ec.publish(&#39;test&#39;,&#39;hi&#39;,{delay:5,expires:3600,priority:0});
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt;: The item will not be available on the queue until this many seconds have passed.
Default is 0 seconds. Maximum is 365 days(in seconds).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;expires&lt;/code&gt;: How long in seconds to keep the item on the queue before it is deleted.
Default is 0(365 days).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;priority&lt;/code&gt;: It can be either -20,0,20 (High, Medium, Low).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-subscribe-queuename-callback&#34;&gt;2. subscribe(queuename,callback)&lt;/h4&gt;

&lt;p&gt;The subscribe function is fetches a message from the etzel server. The argument required are queuename which is the name of the you want to fetch the data from, callback is a custom fucntion which you have you provide.&lt;/p&gt;

&lt;p&gt;Example:-&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;etzelclient=require(&amp;quot;etzelclient&amp;quot;);

ec=new etzelclient(&amp;quot;ws://localhost:8080/connect&amp;quot;);

//function which the end user writes
function mycallback(data){

    console.log(data.msg+&amp;quot; from the queue&amp;quot;);
    ec.acknowledge(&amp;quot;test&amp;quot;,data.uid);

}
ec.onopen=function(){
    ec.subscribe(&amp;quot;test&amp;quot;,mycallback);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here test is the queuename.
An entity fetching data from the specific queue is called a worker. You can multiple workers working on the same queue. The server facilitates load balancing amongst the workers. Fetching a message will delete the message from the queue &lt;strong&gt;temporarily&lt;/strong&gt;(re-queued after 60 seconds).&lt;/p&gt;

&lt;p&gt;acknowledge(queuename,uid)&lt;/p&gt;

&lt;p&gt;To delete it permanently , we use the acknowledge function which deletes/acknowledges a specific message from the queue. The arguments required are queuename and the id of the message you want to acknowledge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Data format</title>
      <link>http://163.172.174.245/etzel-site/public/docs/internal/data-format/</link>
      <pubDate>Sat, 22 Aug 2015 23:02:31 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/docs/internal/data-format/</guid>
      <description>

&lt;h3 id=&#34;queue-element-format-in-memory&#34;&gt;Queue Element format in Memory&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;error_count|expires|UidSize|uid|Item

Size of each block in bits:
&amp;lt;&amp;lt;error_count:8&amp;gt;&amp;gt;,&amp;lt;&amp;lt;Expires:64&amp;gt;&amp;gt;,&amp;lt;&amp;lt;Uid_size:16&amp;gt;&amp;gt;,Uid,Msg
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;queue-element-format-on-disk&#34;&gt;Queue element format on disk&lt;/h3&gt;

&lt;p&gt;The queue elements are stored in a key value store in the following format.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. DATA

let us divide DATA which is made up of a key and value.

2. Key: Value

divide them further

3. Qname-uid:  error_count|Delay|expires|Item

Qname: Variable length text
Uid: 14-18 bytes
error_count: 8 bits 
delay: 64 bits
expires: 64 bits
Item: Variable lenght text

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Documentation</title>
      <link>http://163.172.174.245/etzel-site/public/documentation/</link>
      <pubDate>Sat, 22 Aug 2015 21:24:53 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/documentation/</guid>
      <description>

&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://163.172.174.245/etzel-site/public/getstarted/&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;etzel-internals&#34;&gt;Etzel Internals&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://163.172.174.245/etzel-site/public/docs/internal/req-resp-format/&#34;&gt;Request &amp;amp; Response format&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://163.172.174.245/etzel-site/public/docs/internal/worker-algorithm/&#34;&gt;Worker Alogrithm/Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://163.172.174.245/etzel-site/public/docs/internal/server-algorithm/&#34;&gt;Server Algorithm/Flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://163.172.174.245/etzel-site/public/docs/internal/data-format/&#34;&gt;Data format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://163.172.174.245/etzel-site/public/getstarted/</link>
      <pubDate>Tue, 18 Aug 2015 13:00:41 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/getstarted/</guid>
      <description>&lt;p&gt;Download etzel-server-*.zip from the &lt;a href=&#34;http://163.172.174.245/etzel-site/public/downloads/&#34;&gt;download&lt;/a&gt; section.&lt;/p&gt;

&lt;p&gt;Inside the archive is a directory named &lt;code&gt;etzel_release&lt;/code&gt;. You should extract this into some appropriate location. The &lt;code&gt;bin&lt;/code&gt; directory will be found in this directory.&lt;/p&gt;

&lt;p&gt;Open a terminal or command prompt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd etzel_release/bin
./etzel_release console

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use Ctrl+c to stop&lt;/p&gt;

&lt;p&gt;to start it in the background:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./etzel_release start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to stop:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./etzel_release stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to restart:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./etzel_release restart
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Etzel Server</title>
      <link>http://163.172.174.245/etzel-site/public/home/</link>
      <pubDate>Tue, 18 Aug 2015 10:35:58 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/home/</guid>
      <description>

&lt;p&gt;A Fast &amp;amp; Reliable open source Job delegation &amp;amp; queueing server.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://163.172.174.245/etzel-site/public/images/etzel.png&#34; alt=&#34;Etzel Server&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Etzel is built for Robust messaging between applications. It has built-in support for load-balancing and fault tolerance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build distributed applications that scale right from the start&lt;/li&gt;
&lt;li&gt;Build applications that have no single point of failure&lt;/li&gt;
&lt;li&gt;Decouple your program into components written in languages best suited for the task&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;

&lt;p&gt;Let us define some workload i.e. to send emails using PHP(client)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php

$etzel = new EtzelClient(&amp;quot;ws://127.0.0.1:8080/connect&amp;quot;);

$emails= [&amp;quot;abc@example.com&amp;quot;,&amp;quot;def@example.com&amp;quot;,&amp;quot;hij@example.com&amp;quot;];

foreach($emails as $email){
	
	$etzel-&amp;gt;publish(&amp;quot;group1&amp;quot;, $email);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;!-- ?&gt; --&gt;

&lt;p&gt;Now, Let us process those emails using nodejs(worker)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ec=new EtzelClient(&amp;quot;ws://localhost:8080/connect&amp;quot;);

ec.onopen=function(){
	
	ec.subscribe(&amp;quot;group1&amp;quot;,sendMail);
}

function sendMail(data){

		sendmessage(data.msg,&amp;quot;Subject&amp;quot;,&amp;quot;Message&amp;quot;);
		ec.acknowledge(data.uid); //delete it

}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Did you know?&lt;/strong&gt;
you could have hundreds of workers connected to Etzel to do the processing and Etzel will automatically balance the load between them.&lt;/p&gt;

&lt;p&gt;Etzel Instances are light weight, Hence you can have multiple Etzel instances running in parallel in the same or different server.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if a worker dies?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Etzel will route the messages to the workers that are alive and re-send incomplete tasks to other workers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What if all the workers die?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Etzel will keep the messages until a worker is available.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://163.172.174.245/etzel-site/public/about/</link>
      <pubDate>Mon, 17 Aug 2015 22:07:32 +0530</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/about/</guid>
      <description>

&lt;p&gt;Etzel is a Job Delegation and queueing server.&lt;/p&gt;

&lt;p&gt;We built etzel to solve the problem of existing queueing softwares which were either proprietary or bulky or slow.
we desired something fast, lightweight and well documented, which would be as reliable &amp;amp; robust as any enterprise software.&lt;/p&gt;

&lt;p&gt;Another goal of Etzel is to keep things simple. Etzel uses a simple protocol based on websockets.
This makes Etzel as easy to connect as a HTTP service and yet have speeds similar to a raw TCP channel.&lt;/p&gt;

&lt;p&gt;we would like to express our sincere gratitude to everyone on the Erlang mailing list who helped us while designing the system architecture.&lt;/p&gt;

&lt;p&gt;Etzel uses a lot of libraries without which this project wouldn&amp;rsquo;t be possible.&lt;/p&gt;

&lt;h3 id=&#34;lead-developers&#34;&gt;Lead Developers&lt;/h3&gt;

&lt;p&gt;Avinash D&amp;rsquo; Silva [&lt;a href=&#34;https://in.linkedin.com/in/avinashdsilva&#34;&gt;Linkedin&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Gavin D&amp;rsquo; Mello [&lt;a href=&#34;https://in.linkedin.com/pub/gavin-d-mello/84/5b0/b55&#34;&gt;Linkedin&lt;/a&gt;]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>front</title>
      <link>http://163.172.174.245/etzel-site/public/front/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://163.172.174.245/etzel-site/public/front/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>